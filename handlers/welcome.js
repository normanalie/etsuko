const {
    getTrackedMessage,
    getPrograms,
    setTrackedMessage,
    getRole,
} = require('../misc/database')
const {
    ActionRowBuilder,
    EmbedBuilder,
    StringSelectMenuBuilder,
    StringSelectMenuOptionBuilder,
    ComponentType,
} = require('discord.js')

async function handleWelcome(client) {
    const welcomeMessage = await getTrackedMessage(client, 'welcome')
    if (welcomeMessage == null) {
        console.log('No welcome message. Please use /initWelcome')
        return
    }
    setCollector(welcomeMessage)
}

let currentCollector = null
function setCollector(welcomeMessage) {
    if (currentCollector) {
        console.log('Stopped collector')
        currentCollector.stop()
    }
    const collector = welcomeMessage.createMessageComponentCollector({
        componentType: ComponentType.StringSelect,
        time: 3_600_000,
    })

    collector.on('collect', async (i) => {
        try {
            const selection = i.values[0]
            const role = await getRole(selection)
            if (role) {
                await i.member.roles.add(role.roleid)
                await i.reply({
                    content: `Vous avez d√©sormais le r√¥le ${role.name} !`,
                    ephemeral: true,
                })
                if (role.isStudent) {
                    const studentRole = await getRole('student')
                    if (studentRole) {
                        await i.member.roles.add(studentRole.roleid)
                        await i.followUp({
                            content: `Vous avez √©galement le r√¥le √©tudiant.`,
                            ephemeral: true,
                        })
                    } else {
                        await i.followUp({
                            content: `Le r√¥le "student" n'a pas √©t√© trouv√©.`,
                            ephemeral: true,
                        })
                    }
                }
            } else {
                await i.reply({
                    content: `Le r√¥le ${selection} n'a pas √©t√© trouv√©.`,
                    ephemeral: true,
                })
            }
        } catch (error) {
            console.error(
                'Erreur lors de la collecte du composant de message :',
                error
            )
            await i.followUp({
                content:
                    "Une erreur s'est produite lors de la s√©lection du r√¥le.",
                ephemeral: true,
            })
        }
    })

    currentCollector = collector
}

async function buildActionRow() {
    const programs = await getPrograms()
    const programSelect = new StringSelectMenuBuilder()
        .setCustomId('program')
        .setPlaceholder('Votre fili√®re ?')
    programs.forEach((program) => {
        const optionBuilder = new StringSelectMenuOptionBuilder()
            .setLabel(program.displayname)
            .setValue(program.name)

        if (program.desc !== null && program.desc.length >= 1) {
            optionBuilder.setDescription(program.desc)
        }

        programSelect.addOptions(optionBuilder)
    })
    return new ActionRowBuilder().addComponents(programSelect)
}

function buildEmbed() {
    const embed = new EmbedBuilder()
        .setAuthor({
            name: 'Etsuko',
            url: 'https://github.com/normanalie/etsuko',
        })
        .setTitle('üöÄ Bienvenue sur le serveur **__Tous les ISTY__**')
        .setDescription(
            "Ce lieu d'√©change est d√©di√© √† tous les membres de l'ISTY. \nConnectez-vous pour d√©couvrir des espaces uniques : √©changez avec vos camarades de promo, dialoguez directement avec vos professeurs, discutez avec d'autres √©tudiants de votre fili√®re, et cr√©ez des liens avec l'ensemble de la communaut√© ISTY, align√©s sur vos passions communes.\n\n."
        )
        .addFields(
            {
                name: '‚úÖ **Quelques r√®gles √† respecter**',
                value: "1. **Respect et courtoisie** : Respectez toujours les autres membres du serveur et soyez courtois dans vos interactions.\n2. **Contenu appropri√©** : Assurez-vous que tout contenu partag√© sur le serveur est appropri√© pour un environnement scolaire et professionnel.\n3. **Langage respectueux** : Utilisez un langage respectueux en tout temps, √©vitez les jurons et les discours offensants.\n4. **Collaboration** : Encouragez la collaboration et le partage d'id√©es entre les membres du serveur.\n5. **Pas de spam** : √âvitez de spammer les canaux avec des messages inutiles ou r√©p√©titifs.\n6. **Respect de la vie priv√©e** : Respectez la vie priv√©e des autres membres en ne partageant pas d'informations personnelles sans leur consentement.\n7. **Mod√©ration** : Respectez les d√©cisions des mod√©rateurs et des administrateurs du serveur, et suivez leurs instructions en cas de besoin.\n8. **Signalement** : Signalez tout comportement inappropri√© ou toute violation des r√®gles aux mod√©rateurs pour une action appropri√©e.\n\n.",
                inline: false,
            },
            {
                name: '‚òéÔ∏è **Les contacts**',
                value: 'Ce serveur est administr√© par <@638094645670182932>\nLa mod√©ration est assur√©e par:\n- <@279258207267061760>\n- <@333544742354812928>\n- <@97035275686907904>\n- <@394458641358520320>\n- <@290231852755582978>\n- <@240142431570362368>\n- <@272788035383459840>\n- <@125591910982090752>\n- <@282091856530112522>\nLe bot est g√©r√© par <@775757989965070387>\n\n.',
                inline: false,
            },
            {
                name: 'üìù **Les r√¥les**',
                value: "Pour acc√©der au serveur, compl√®te le formulaire ci-dessous et le bot t'attribuera tes r√¥les automatiquement.\n",
                inline: false,
            }
        )
        .setColor('#ff9300')
    return embed
}

async function sendWelcomeMessage(channel) {
    if (!channel) return

    const embed = buildEmbed()

    const row = await buildActionRow()

    const message = await channel.send({
        embeds: [embed],
        components: [row],
    })
    await setTrackedMessage('welcome', message.channelId, message.id)
    setCollector(message)
}

exports.sendWelcomeMessage = sendWelcomeMessage
exports.handleWelcome = handleWelcome
